// Base de donn√©es des ingr√©dients
const ingredients = [
    // Fruits
    { name: "üçå Banane", price: 200, category: "fruit" },
    { name: "üçì Fraise", price: 500, category: "fruit" },
    { name: "ü•≠ Mangue", price: 300, category: "fruit" },
    { name: "ü•• Noix de coco", price: 400, category: "fruit" },
    { name: "üçç Ananas", price: 200, category: "fruit" },
    { name: "üçè Pomme verte", price: 500, category: "fruit" },
    { name: "ü•ù Kiwi", price: 600, category: "fruit" },
    { name: "üçë P√™che", price: 500, category: "fruit" },
    { name: "üçá Raisin", price: 500, category: "fruit" },
    { name: "üçâ Past√®que", price: 500, category: "fruit" },
    { name: "üçä Orange", price: 300, category: "fruit" },
    { name: "üçã Citron", price: 250, category: "fruit" },
    { name: "üçà Melon", price: 450, category: "fruit" },
    { name: "üçí Cerise", price: 700, category: "fruit" },
    { name: "üçê Poire", price: 400, category: "fruit" },
    { name: "üçè Pomme rouge", price: 500, category: "fruit" },
    { name: "üçâ Grenade", price: 600, category: "fruit" },
    { name: "ü•ë Avocat", price: 700, category: "fruit" },
    { name: "ü•• A√ßa√Ø", price: 500, category: "fruit" },
    { name: "üçà Fruit de la passion", price: 600, category: "fruit" },
    { name: "üçâ Baies de Goji", price: 600, category: "fruit" },
    { name: "ü´ê Myrtille", price: 700, category: "fruit" },
    { name: "üçì Framboise", price: 650, category: "fruit" },
    { name: "üçë Nectarine", price: 550, category: "fruit" },
    { name: "ü•≠ Papaye", price: 400, category: "fruit" },
    { name: "ü•• Litchi", price: 600, category: "fruit" },
    { name: "üçä Cl√©mentine", price: 350, category: "fruit" },
    { name: "üçã Lime", price: 300, category: "fruit" },
    { name: "üçå Plantain", price: 250, category: "fruit" },
    { name: "üçè Kaki", price: 600, category: "fruit" },

    // L√©gumes
    { name: "ü•ï Carotte", price: 300, category: "legume" },
    { name: "ü•í Concombre", price: 250, category: "legume" },
    { name: "ü•¨ √âpinard", price: 300, category: "legume" },
    { name: "ü•¶ Brocoli", price: 400, category: "legume" },
    { name: "ü•¨ Kale", price: 500, category: "legume" },
    { name: "ü•ó Roquette", price: 400, category: "legume" },
    { name: "ü•í Courgette", price: 350, category: "legume" },
    { name: "üå∂ Poivron rouge", price: 300, category: "legume" },
    { name: "üå∂ Poivron jaune", price: 300, category: "legume" },
    { name: "üå∂ Poivron vert", price: 300, category: "legume" },
    { name: "ü•¨ Chou vert", price: 350, category: "legume" },
    { name: "ü•¨ Chou rouge", price: 350, category: "legume" },
    { name: "ü•í C√©leri", price: 250, category: "legume" },
    { name: "üßÑ Ail", price: 100, category: "legume" },
    { name: "üßÖ Oignon", price: 150, category: "legume" },
    { name: "üå± Cresson", price: 400, category: "legume" },
    { name: "ü•î Patate douce", price: 350, category: "legume" },
    { name: "üç† Betterave", price: 400, category: "legume" },

    // Racines et compl√©ments
    { name: "ü´ö Gingembre", price: 300, category: "racine" },
    { name: "üü† Curcuma", price: 300, category: "racine" },
    { name: "üå± Moringa", price: 500, category: "complement" },
    { name: "üåø Spiruline", price: 300, category: "complement" },
    { name: "üçÉ Chlorelle", price: 350, category: "complement" },
    { name: "üçµ Matcha", price: 600, category: "complement" },
    { name: "üåæ Herbe de bl√©", price: 500, category: "complement" },

    // Graines et noix
    { name: "üå∞ Chia", price: 500, category: "graine" },
    { name: "üåª Graines de tournesol", price: 400, category: "graine" },
    { name: "üéÉ Graines de courge", price: 450, category: "graine" },
    { name: "ü•ú Amandes", price: 700, category: "noix" },
    { name: "ü•ú Noisettes", price: 750, category: "noix" },
    { name: "ü•ú Noix de cajou", price: 800, category: "noix" },
    { name: "üå∞ Noix du Br√©sil", price: 850, category: "noix" },

    // Autres super-aliments
    { name: "üçØ Miel", price: 600, category: "sucrant" },
    { name: "üçÅ Sirop d'√©rable", price: 700, category: "sucrant" },
    { name: "ü•• Lait de coco", price: 500, category: "lait" },
    { name: "ü•õ Lait d‚Äôamande", price: 600, category: "lait" },
    { name: "ü•õ Lait de soja", price: 550, category: "lait" },
    { name: "ü•õ Lait de noisette", price: 650, category: "lait" },
    { name: "ü•§ Prot√©ines v√©g√©tales", price: 800, category: "complement" },
    { name: "üç´ Cacao cru", price: 700, category: "complement" },
    { name: "ü•• Beurre de coco", price: 750, category: "complement" },
];

// Variables globales
let totalPrice = 0;
const selectedIngredients = new Set();
const FLW_PUBLIC_KEY = 'VOTRE_CLE_PUBLIQUE_FLUTTERWAVE';
const BACKEND_URL = 'http://localhost:3000';

// Fonction de recherche
function searchIngredients(query) {
    query = query.toLowerCase();
    return ingredients.filter(ingredient =>
        ingredient.name.toLowerCase().includes(query)
    );
}

// Afficher les r√©sultats de la recherche
function displaySearchResults(query) {
    const results = searchIngredients(query);
    const resultsContainer = document.getElementById('results');
    resultsContainer.innerHTML = results.length > 0
        ? results.map(ingredient => `<li>${ingredient.name} - ${ingredient.price} CFA</li>`).join('')
        : '<li>Aucun r√©sultat trouv√©.</li>';
}

// Gestion de la s√©lection des ingr√©dients
function setupIngredients() {
    document.querySelectorAll('.ingredient-card').forEach(card => {
        card.addEventListener('click', () => {
            const price = parseInt(card.dataset.price);
            if (selectedIngredients.has(card)) {
                card.classList.remove('selected');
                selectedIngredients.delete(card);
                totalPrice -= price;
            } else {
                card.classList.add('selected');
                selectedIngredients.add(card);
                totalPrice += price;
            }
            updatePriceDisplay();
            checkValidation();
        });
    });
}

// Mettre √† jour l'affichage du prix
function updatePriceDisplay() {
    document.getElementById('total-price').textContent = totalPrice;
}

// V√©rifier la validation (au moins 4 ingr√©dients)
function checkValidation() {
    const validationMsg = document.getElementById('validationMsg');
    validationMsg.style.display = selectedIngredients.size < 4 ? 'block' : 'none';
}

// Gestion de la banni√®re
function setupBanner() {
    const bannerImages = document.querySelectorAll('.promo-banner img');
    let currentBannerIndex = 0;

    function cycleBanner() {
        bannerImages[currentBannerIndex].classList.remove('active');
        currentBannerIndex = (currentBannerIndex + 1) % bannerImages.length;
        bannerImages[currentBannerIndex].classList.add('active');
    }

    setInterval(cycleBanner, 5000);
}

// Gestion du formulaire de commande
function setupOrderForm() {
    document.getElementById('orderForm').addEventListener('submit', async (e) => {
        e.preventDefault();

        const clientName = document.getElementById('clientName').value;
        const clientEmail = document.getElementById('clientEmail').value;
        const clientPhone = document.getElementById('clientPhone').value;
        const paymentMethod = document.querySelector('input[name="payment"]:checked');

        if (!paymentMethod || selectedIngredients.size < 4) {
            alert('Veuillez compl√©ter tous les champs et s√©lectionner 4 ingr√©dients.');
            return;
        }

        try {
            document.querySelector('.payment-processing').classList.remove('hidden');
            await processPayment({
                name: clientName,
                email: clientEmail,
                phone: clientPhone,
                amount: totalPrice,
                method: paymentMethod.value,
            });
        } catch (error) {
            console.error('Erreur lors du traitement de la commande :', error);
            alert('Une erreur est survenue lors du traitement de la commande.');
        } finally {
            document.querySelector('.payment-processing').classList.add('hidden');
        }
    });
}

// Traitement du paiement
async function processPayment(orderData) {
    return new Promise((resolve, reject) => {
        FlutterwaveCheckout({
            public_key: FLW_PUBLIC_KEY,
            tx_ref: `CMD-${Date.now()}`,
            amount: orderData.amount,
            currency: 'XOF',
            payment_options: orderData.method === 'mobile' ? 'mobilemoney' : 'card',
            customer: {
                email: orderData.email,
                name: orderData.name,
                phone_number: orderData.phone,
            },
            callback: async (response) => {
                if (response.status === 'successful') {
                    try {
                        await saveOrderToDatabase(orderData);
                        showOrderSummary(orderData);
                        resetForm();
                        resolve();
                    } catch (error) {
                        reject(error);
                    }
                } else {
                    reject(new Error('Paiement √©chou√©'));
                }
            },
        });
    });
}

// Sauvegarder la commande dans la base de donn√©es
async function saveOrderToDatabase(orderData) {
    const response = await fetch(`${BACKEND_URL}/orders`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
            ...orderData,
            ingredients: Array.from(selectedIngredients).map(card => card.textContent.trim()),
        }),
    });

    if (!response.ok) {
        throw new Error('Erreur lors de la sauvegarde de la commande.');
    }
}

// Afficher le r√©sum√© de la commande
function showOrderSummary(orderData) {
    const summary = document.getElementById('orderSummary');
    summary.innerHTML = `
        <h3>üéâ Commande confirm√©e !</h3>
        <p>Montant : ${orderData.amount} CFA</p>
        <p>Email : ${orderData.email}</p>
    `;
    summary.classList.remove('hidden');
}

// R√©initialiser le formulaire
function resetForm() {
    document.getElementById('orderForm').reset();
    selectedIngredients.forEach(card => card.classList.remove('selected'));
    selectedIngredients.clear();
    totalPrice = 0;
    updatePriceDisplay();
    checkValidation();
}

// Initialisation
document.addEventListener('DOMContentLoaded', () => {
    setupBanner();
    setupIngredients();
    setupOrderForm();
    document.getElementById('searchBar').addEventListener('input', (e) => {
        displaySearchResults(e.target.value);
    });
});